# -*- coding: utf-8 -*-

# Form implementation generated from reading ui file '.\attentionplease.ui'
#
# Created by: PyQt5 UI code generator 5.15.4
#
# WARNING: Any manual changes made to this file will be lost when pyuic5 is
# run again.  Do not edit this file unless you know what you are doing.


from PyQt5 import QtCore, QtGui, QtWidgets
from PyQt5.QtWidgets import QDialog, QApplication, QPushButton, QVBoxLayout
from matplotlib.backends.backend_qt5agg import FigureCanvasQTAgg as FigureCanvas
from matplotlib.backends.backend_qt5agg import NavigationToolbar2QT as NavigationToolbar
import helper
import cv2
import matplotlib.pyplot as plt
import matplotlib as mpl
from deepface import DeepFace
import json
import numpy as np
import collections
import threading
import pyautogui
from matplotlib.backends.backend_qt5agg import FigureCanvasQTAgg
from matplotlib.figure import Figure
import random
import time
#import pyqtgraph as pg

_translate = QtCore.QCoreApplication.translate
class Ui_Dialog(object):
    def setupUi(self, Dialog):
        Dialog.setObjectName("Dialog")
        Dialog.resize(712, 298)
        self.tableWidget = QtWidgets.QTableWidget(Dialog)
        self.tableWidget.setGeometry(QtCore.QRect(20, 10, 151, 241))
        self.tableWidget.setObjectName("tableWidget")
        self.tableWidget.setColumnCount(1)
        self.tableWidget.setRowCount(7)
        item = QtWidgets.QTableWidgetItem()
        self.tableWidget.setVerticalHeaderItem(0, item)
        item = QtWidgets.QTableWidgetItem()
        self.tableWidget.setVerticalHeaderItem(1, item)
        item = QtWidgets.QTableWidgetItem()
        self.tableWidget.setVerticalHeaderItem(2, item)
        item = QtWidgets.QTableWidgetItem()
        self.tableWidget.setVerticalHeaderItem(3, item)
        item = QtWidgets.QTableWidgetItem()
        self.tableWidget.setVerticalHeaderItem(4, item)
        item = QtWidgets.QTableWidgetItem()
        self.tableWidget.setVerticalHeaderItem(5, item)
        item = QtWidgets.QTableWidgetItem()
        self.tableWidget.setVerticalHeaderItem(6, item)
        item = QtWidgets.QTableWidgetItem()
        self.tableWidget.setHorizontalHeaderItem(0, item)
        item = QtWidgets.QTableWidgetItem()
        self.tableWidget.setItem(0, 0, item)
        item = QtWidgets.QTableWidgetItem()
        self.tableWidget.setItem(1, 0, item)
        item = QtWidgets.QTableWidgetItem()
        self.tableWidget.setItem(2, 0, item)
        item = QtWidgets.QTableWidgetItem()
        self.tableWidget.setItem(3, 0, item)
        item = QtWidgets.QTableWidgetItem()
        self.tableWidget.setItem(4, 0, item)
        item = QtWidgets.QTableWidgetItem()
        self.tableWidget.setItem(5, 0, item)
        item = QtWidgets.QTableWidgetItem()
        self.tableWidget.setItem(6, 0, item)
        self.pushButton = QtWidgets.QPushButton(Dialog)
        self.pushButton.setGeometry(QtCore.QRect(530, 260, 75, 23))
        self.pushButton.setObjectName("pushButton")
        self.pushButton_2 = QtWidgets.QPushButton(Dialog)
        self.pushButton_2.setGeometry(QtCore.QRect(610, 260, 75, 23))
        self.pushButton_2.setObjectName("pushButton_2")
        self.graphicsView = QtWidgets.QGraphicsView(Dialog)
        #self.graphicsView = QtWidgets.QVBoxLayout()
        self.graphicsView.setGeometry(QtCore.QRect(190, 10, 491, 241))
        self.graphicsView.setObjectName("graphicsView")

        # self.myFig = MyFigureCanvas(x_len=200, y_range=[0, 100], interval=20)
        # self.graphicsView.addWidget(self.myFig)

        # 3. Show
        #self.graphicsView.add

        #self.graphWidget = pg.PlotWidget()
        #self.setCentralWidget(self.graphicsView)
        self.retranslateUi(Dialog)
        QtCore.QMetaObject.connectSlotsByName(Dialog)

    def retranslateUi(self, Dialog):
        _translate = QtCore.QCoreApplication.translate
        Dialog.setWindowTitle(_translate("Dialog", "Dialog"))
        item = self.tableWidget.verticalHeaderItem(0)
        item.setText(_translate("Dialog", "Angry"))
        item = self.tableWidget.verticalHeaderItem(1)
        item.setText(_translate("Dialog", "Disgust"))
        item = self.tableWidget.verticalHeaderItem(2)
        item.setText(_translate("Dialog", "Fear"))
        item = self.tableWidget.verticalHeaderItem(3)
        item.setText(_translate("Dialog", "Happy"))
        item = self.tableWidget.verticalHeaderItem(4)
        item.setText(_translate("Dialog", "Sad"))
        item = self.tableWidget.verticalHeaderItem(5)
        item.setText(_translate("Dialog", "Surprise"))
        item = self.tableWidget.verticalHeaderItem(6)
        item.setText(_translate("Dialog", "Neutral"))
        item = self.tableWidget.horizontalHeaderItem(0)
        item.setText(_translate("Dialog", "Count"))
        __sortingEnabled = self.tableWidget.isSortingEnabled()
        self.tableWidget.setSortingEnabled(False)
        self.Angry = self.tableWidget.item(0, 0)
        self.Angry.setText(_translate("Dialog", "0"))
        self.Disgust = self.tableWidget.item(1, 0)
        self.Disgust.setText(_translate("Dialog", "0"))
        self.Fear = self.tableWidget.item(2, 0)
        self.Fear.setText(_translate("Dialog", "0"))
        self.Happy = self.tableWidget.item(3, 0)
        self.Happy.setText(_translate("Dialog", "0"))
        self.Sad = self.tableWidget.item(4, 0)
        self.Sad.setText(_translate("Dialog", "0"))
        self.Surprise = self.tableWidget.item(5, 0)
        self.Surprise.setText(_translate("Dialog", "0"))
        self.Neutral = self.tableWidget.item(6, 0)
        self.Neutral.setText(_translate("Dialog", "0"))
        self.tableWidget.setSortingEnabled(__sortingEnabled)
        self.pushButton.setText(_translate("Dialog", "Start"))
        self.pushButton_2.setText(_translate("Dialog", "End"))

# def processImageThread(success,img):
#     while success:
#         success,img = vidcap.read()
#         #emotions = collections.deque(np.zeros(shape=(20,7)))
#         emotions = helper.processFrame(img)
#         helper.updateEmotionValues(emotions,ui,_translate)
#         print(f'Read frame count {count} with success: {success}')

def takeScreenshots():
    img = pyautogui.screenshot()
    _translate = QtCore.QCoreApplication.translate
    open_cv_image = np.array(img)
    emotions = helper.processFrame(open_cv_image)
    helper.updateEmotionValues(emotions,ui,_translate)
    
if __name__ == "__main__":
    import sys
    app = QtWidgets.QApplication(sys.argv)
    Dialog = QtWidgets.QDialog()
    ui = Ui_Dialog()
    ui.setupUi(Dialog)
    Dialog.show()
    
    timer = QtCore.QTimer()
    timer.timeout.connect(takeScreenshots)
    timer.start(2000)
    
    sys.exit(app.exec_())
